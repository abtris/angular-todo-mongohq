var Cobertura={generateReport:function(a){var a=a.evaluate(function(){var a={files:0,packages:0,testableLines:0,testedLines:0,untestedLines:0,packageMap:{}};if(_$jscoverage)for(var b in _$jscoverage)if(_$jscoverage.hasOwnProperty(b)){var c=_$jscoverage[b],d;d=b.split("/");d.pop();d=d.join(".");a.files++;a.packageMap[d]||(a.packages++,a.packageMap[d]={testableLines:0,testedLines:0,untestedLines:0,classMap:{}});a.packageMap[d].classMap[b]={source:c.source,file:b,classPath:d,testableLines:0,testedLines:0,
untestedLines:0,coverage:{}};for(var e=0;e<c.source.length;e++){var e=parseInt(e,10),g=c[e+1],h=0;g!==void 0?(a.testableLines++,a.packageMap[d].testableLines++,a.packageMap[d].classMap[b].testableLines++,g>0&&(h=g,a.testedLines++,a.packageMap[d].testedLines++,a.packageMap[d].classMap[b].testedLines++),a.packageMap[d].classMap[b].coverage[e]={hits:h}):(a.packageMap[d].untestedLines++,a.packageMap[d].classMap[b].untestedLines++)}}return a}),b=[];b.push("<?xml version='1.0' encoding='UTF-8'?>");b.push("<!DOCTYPE coverage SYSTEM 'http://cobertura.sourceforge.net/xml/coverage-03.dtd'>");
b.push("<coverage line-rate='"+a.testedLines/a.testableLines+"' branch-rate='0' version='3.5.1' timestamp='"+(new Date).getTime().toString()+"'>");b.push("\t<sources/>");b.push("\t<packages>");for(var c in a.packageMap){b.push("\t\t<package name='"+c+"' line-rate='"+a.packageMap[c].testedLines/a.packageMap[c].testableLines+"' branch-rate='0' complexity='0'>");b.push("\t\t\t<classes>");for(var d in a.packageMap[c].classMap){b.push("\t\t\t\t<class name='"+d+"' filename='"+Config.src.application+"/"+
a.packageMap[c].classMap[d].file+"' line-rate='"+a.packageMap[c].classMap[d].testedLines/a.packageMap[c].classMap[d].testableLines+"' branch-rate='0'>");b.push("\t\t\t\t\t<lines>");for(var e in a.packageMap[c].classMap[d].coverage)b.push("\t\t\t\t\t\t<line number='"+(parseInt(e,10)+1).toString()+"' hits='"+a.packageMap[c].classMap[d].coverage[e].hits.toString()+"' branch='false' />");b.push("\t\t\t\t\t</lines>");b.push("\t\t\t\t</class>")}b.push("\t\t\t</classes>");b.push("\t\t</package>")}b.push("\t</packages>");
b.push("</coverage>");console.log("Coverage measured ("+Math.round(a.testedLines/a.testableLines*100)+"%):");console.log("\t"+a.packages+" packages");console.log("\t"+a.files+" files");return b.join("\n")}};var JUnit={generateReport:function(a){var a=a.evaluate(function(){return getReport()}),b=[];b.push("<?xml version='1.0' encoding='UTF-8'?>");b.push("<testsuite tests='"+a.count+"' failures='"+a.failures+"' disabled='0' errors='0' time='"+a.time/1E3+"' name='tests'>");for(var c in a.modules){var d=a.modules[c];b.push("\t<testsuite tests='"+d.count+"' failures='"+d.failures+"' disabled='0' errors='0' time='"+d.time/1E3+"' name='"+c+"'>");for(var e in d.tests){var f=d.tests[e];b.push("\t\t<testcase name='"+
e+"' status='"+(f.success?"pass":"fail")+"' time='"+f.time/1E3+"' classname='"+c+"' />")}b.push("\t</testsuite>")}b.push("</testsuite>");console.log("Tests completed ("+a.count+"): "+a.time+"ms.");console.log("\t"+a.passed+" passed");console.log("\t"+a.failures+" failed");return b.join("\n")}};function waitFor(a,b,c){var d=c?c:3001,e=(new Date).getTime(),f=false,i=setInterval(function(){var c=(new Date).getTime()-e;if(c<d&&!f)f=a();else{clearInterval(i);if(!f)throw"waitFor() timeout";console.log("Page load time: "+c+"ms.");b()}},250)};var File={fs:require("fs"),save:function(a,b){this.fs.write(a,b,"w")},getJavascriptsFromDirectory:function(a){for(var b=[],c=this.fs.list(a),d=0;d<c.length;d++)if(c[d]!=="."&&c[d]!==".."){var e=a+this.fs.separator+c[d];this.fs.isFile(e)&&e.indexOf(".js")!==-1?b.push(e):this.fs.isDirectory(e)&&(b=b.concat(this.getJavascriptsFromDirectory(e)))}return b}};var Template={fs:require("fs"),get:function(a,b){var c=this.fs.read(a),d;for(d in b)c=c.replace("{{ "+d+" }}",b[d]);return c},getScripts:function(a){var b=[],c;for(c in a)b.push("<script type='text/javascript' src='"+a[c]+"'><\/script>");return b.join("\n")},getScriptsFromDirectory:function(a,b){var c=File.getJavascriptsFromDirectory(a);if(b){var d=[],e;for(e in c)d.push(c[e].split(a+"/",2).join(""));return this.getScripts(d)}else return this.getScripts(c)}};var Coverage={fs:require("fs"),options:{},page:null,initialize:function(a){this.options=this.getOptions(a);phantom.injectJs(this.options.config);switch(a[0]){case "prepare":this.prepare();break;case "run":this.run()}},prepare:function(){this.fs.removeTree(Config.target);this.fs.makeTree(Config.target+"/src");this.fs.makeTree(Config.target+"/bin");this.fs.copyTree(Config.src.application,Config.target+"/src");var a=Template.get(Config.templates+"/testrunner.html",{libScripts:Template.getScriptsFromDirectory(Config.src.libraries,
true),sourceScripts:Template.getScriptsFromDirectory(Config.src.application,true),scripts:Template.getScriptsFromDirectory(Config.src.tests,true)});File.save(Config.target+"/src/testrunner.html",a);phantom.exit(0)},run:function(){this.fs.copyTree(Config.src.libraries,Config.target+"/bin");this.fs.copyTree(Config.src.tests,Config.target+"/bin");this.fs.copy(Config.src.qunit+"/qunit.css",Config.target+"/bin/qunit.css");this.fs.copy(Config.src.qunit+"/qunit.js",Config.target+"/bin/qunit.js");this.fs.copy(Config.src.qunit+
"/qunit-coverage.js",Config.target+"/bin/qunit-coverage.js");this.fs.copyTree(Config.src.mockups,Config.target+"/bin");this.page=new WebPage;this.page.onConsoleMessage=function(a){console.log(a)};this.page.open(Config.target+"/bin/testrunner.html",function(a){if(a!=="success")throw"Unable to access network";else waitFor(function(){return Coverage.isTestCompeted()},function(){Coverage.createReports();Coverage.fs.removeTree(Config.target);phantom.exit(0)},6E4)})},createReports:function(){var a=JUnit.generateReport(this.page,
this.options),b=Cobertura.generateReport(this.page,this.options);File.save(Config.output.junit,a);File.save(Config.output.cobertura,b)},isTestCompeted:function(){return this.page.evaluate(function(){var a=document.getElementById("qunit-testresult");return a&&a.innerText.indexOf("completed")!==-1})},getOptions:function(a){for(var b={},c=0;c<a.length;c++)a[c].indexOf("--")===0&&(c+1<a.length&&a[c+1].indexOf("--")===0?b[a[c].replace("--","")]=true:c+1<a.length&&(b[a[c].replace("--","")]=a[c+1]));return b}};
Coverage.initialize(phantom.args);